<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	default-lazy-init="true" default-autowire="byName"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	

	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.yeren" />
	<mvc:annotation-driven />
	<mvc:resources mapping="/static/**" location="/static/"/>
	
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:redis.properties" />
	
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>application/json;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  

	<!--<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:url="jdbc:mysql://139.199.124.81:3306/seckill" 
		p:driverClassName="com.mysql.jdbc.Driver"
		p:username="root" 
		p:password="123456Ab$"
		 />-->

	<bean id="dataSource"
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		  p:url="jdbc:mysql://192.168.150.130:3306/seckill"
		  p:driverClassName="com.mysql.jdbc.Driver"
		  p:username="root"
		  p:password="123456Ab$"
	/>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource" p:packagesToScan="com.yeren"
		p:hibernateProperties="/hibernate.properties" />

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />
		
	<!-- redis单机配置方案 start-->
	 <!-- redis连接池 -->
	 <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">    
        <property name="maxIdle" value="${redis.maxIdle}" />    
        <property name="maxTotal" value="${redis.maxTotal}" /> <!-- 最大分配的对象数 -->  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />    
    </bean>  
    
    <!-- redis连接工厂 --> 
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"    
        p:host-name="${redis.host}"   
        p:port="${redis.port}"   
        p:password="${redis.pass}"    
        p:pool-config-ref="jedisPoolConfig"/>    
    <!-- redis操作模板，这里采用尽量面向对象的模板 --> 
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">    
        <property name="connectionFactory"   ref="connectionFactory" />    
        <!--  如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！--> 
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
        </property>  
        <!--开启事务-->  
        <property name="enableTransactionSupport" value="true"/>  
    </bean>
	<!-- redis单机配置方案end -->

</beans>